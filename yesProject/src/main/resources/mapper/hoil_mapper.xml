<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="yes">
  <resultMap id="NoticeVo" type="com.bit.yes.model.entity.NoticeVo">
	<result property="index" column="INDEX"/>
	<result property="title" column="TITLE"/>
	<result property="content" column="CONTENT"/>
	<result property="writer" column="WRITER"/>
	<result property="calendar" column="CALENDAR"/>
</resultMap>
  <resultMap id="C_CsVo" type="com.bit.yes.model.entity.C_CsVo">
	<result property="index" column="INDEX"/>
	<result property="title" column="TITLE"/>
	<result property="content" column="CONTENT"/>
	<result property="writer" column="WRITER"/>
	<result property="calendar" column="CALENDAR"/>
	<result property="comment" column="COMMENT"/>
</resultMap>
  <resultMap id="S_CsVo" type="com.bit.yes.model.entity.S_CsVo">
	<result property="index" column="INDEX"/>
	<result property="title" column="TITLE"/>
	<result property="content" column="CONTENT"/>
	<result property="writer" column="WRITER"/>
	<result property="calendar" column="CALENDAR"/>
	<result property="comment" column="COMMENT"/>
</resultMap>
<resultMap id="UserVo" type="com.bit.yes.model.entity.UserVo">
	<result property="id" column="ID"/>
	<result property="password" column="PASSWORD"/>
	<result property="name" column="NAME"/>
	<result property="nickname" column="NICKNAME"/>
	<result property="email" column="EMAIL"/>
	<result property="phoneNum" column="PHONENUM"/>
	<result property="pwQuestion" column="PWQUESTION"/>
	<result property="birthDate" column="BIRTHDATE"/>
	<result property="registNum" column="REGISTNUM"/>
</resultMap>
<resultMap id="BranchInfoVo" type="com.bit.yes.model.entity.BranchInfoVo">
	<result property="id" column="ID"/>
	<result property="branchname" column="BRANCHNAME"/>
	<result property="opTime" column="OPTIME"/>
	<result property="breakTime" column="BREAKTIME"/>
	<result property="opDate" column="OPDATE"/>
	<result property="phoneNum" column="PHONENUM"/>
	<result property="score" column="SCORE"/>
	<result property="state" column="STATE"/>
	<result property="category" column="CATEGORY"/>
	<result property="branchExplain" column="BRANCHEXPLAIN"/>
	<result property="maxTable" column="MAXTABLE"/>
	<result property="tableState" column="TABLESTATE"/>
	<result property="acceptState" column="ACCEPTSTATE"/>
	<result property="waitingNum" column="WAITINGNUM"/>
</resultMap>

	<!-- 전체 회원리스트 쿼리문 -->
	
	<!-- 전체 레코드 개수 조회 --> <!-- 전체 -->
	  	<select id ="all_writeGetCount" parameterType="hashmap" resultType="int">
	  		select count(*) from mydb.userInfo 
	  		  <choose>
	  			<when test="category == 'name'">
	  				where name like '%${keyword}%'
	  			</when>
	  			<when test='category == "nickname"'>
	  				where nickname like '%${keyword}%'
	  			</when>
	  			<when test='category == "email"'>
	  				where email like '%${keyword}%'
	  			</when>
	  		</choose>
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="all_writeList" parameterType="hashmap" resultMap="UserVo">
  			select * from mydb.userInfo
  			<choose>
	  			<when test="category == 'name'">
	  				where name like '%${keyword}%'
	  			</when>
	  			<when test='category == "nickname"'>
	  				where nickname like '%${keyword}%'
	  			</when>
	  			<when test='category == "email"'>
	  				where email like '%${keyword}%'
	  			</when>
	  		</choose>
  			 order by NAME,BIRTHDATE ASC limit #{alloffset}, #{allnoOfRecords}
  		</select>
  		<select id ="all_writeInfoList" resultMap = "UserVo">
  			select * from mydb.userInfo where info = 1 order by userInfo.name,userInfo.birthDate ASC
  		</select>
  		
  		
	<!-- 전체 레코드 개수 조회 --> <!-- 고객만 -->
	  	<select id ="user_writeGetCount" parameterType="hashmap" resultType="int">
	  		select count(*) from mydb.userInfo where registNum = 0  		  
	  		<choose>
	  			<when test="category == 'name'">
	  				and name like '%${keyword}%'
	  			</when>
	  			<when test='category == "nickname"'>
	  				and nickname like '%${keyword}%'
	  			</when>
	  			<when test='category == "email"'>
	  				and email like '%${keyword}%'
	  			</when>
	  		</choose> 
	  		
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="user_writeList" parameterType="hashmap" resultMap="UserVo">
  			select * from mydb.userInfo where registNum = 0
  			<choose>
	  			<when test="category == 'name'">
	  				and name like '%${keyword}%'
	  			</when>
	  			<when test='category == "nickname"'>
	  				and nickname like '%${keyword}%'
	  			</when>
	  			<when test='category == "email"'>
	  				and email like '%${keyword}%'
	  			</when>
	  		</choose>
  			  order by NAME,BIRTHDATE ASC limit #{useroffset}, #{usernoOfRecords}
  		</select>
  		<select id ="user_writeInfoList" resultMap = "UserVo">
  			select * from mydb.userInfo where info = 1 order by userInfo.name,userInfo.birthDate ASC
  		</select>
  		
  		
	<!-- 전체 레코드 개수 조회 --> <!-- 사업자만 -->
	  	<select id ="branch_writeGetCount" parameterType="hashmap" resultType="int">
	  		select count(*) from mydb.userInfo where not registNum = 0
	  		  <choose>
	  			<when test="category == 'name'">
	  				and name like '%${keyword}%'
	  			</when>
	  			<when test='category == "nickname"'>
	  				and nickname like '%${keyword}%'
	  			</when>
	  			<when test='category == "email"'>
	  				and email like '%${keyword}%'
	  			</when>
	  		</choose>
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="branch_writeList" parameterType="hashmap" resultMap="UserVo">
  			select * from mydb.userInfo where not registNum = 0
  			  <choose>
	  			<when test="category == 'name'">
	  				and name like '%${keyword}%'
	  			</when>
	  			<when test='category == "nickname"'>
	  				and nickname like '%${keyword}%'
	  			</when>
	  			<when test='category == "email"'>
	  				and email like '%${keyword}%'
	  			</when>
	  		</choose>
  			order by NAME,BIRTHDATE ASC limit #{branchoffset}, #{branchnoOfRecords}
  		</select>
  		<select id ="branch_writeInfoList" resultMap = "UserVo">
  			select * from mydb.userInfo where info = 1 order by userInfo.name,userInfo.birthDate ASC
  		</select>
  		
  	<!-- 회원리스트에서 id값을 통해 유저정보 가져오기-->	
  		<select id="user_selectOne" resultType="com.bit.yes.model.entity.UserVo">
  			select * from mydb.userInfo where id = #{id}
  		</select>	
  	<!-- 회원리스트에서 id값을 통해 가맹점정보 가져오기(유저인데 만약 reginstNum이 있으면 이것도 가져가서 출력) -->	
  		<select id="user_branch_selectOne" resultType="com.bit.yes.model.entity.BranchInfoVo">
  			select * from mydb.branchInfo where id = #{id}
  		</select>
  	<!-- branchAddress로 db가 따로 있으므로 이것도 가져가서 출력 -->	
  		<select id="user_branch_selectOne_address" resultType="com.bit.yes.model.entity.BranchAddressVo">
  			select * from mydb.branchAddress where id = #{id}
  		</select>
	
	<!-- 공지사항 쿼리문 -->
	<select id="selectAll" resultType="com.bit.yes.model.entity.NoticeVo">
	  		SELECT * FROM noticeBoard ORDER BY noticeBoard.noticeIndex DESC
	  	
	</select>
  	
  	<select id="selectOne" resultType="com.bit.yes.model.entity.NoticeVo">
  			SELECT * FROM noticeBoard WHERE noticeBoard.noticeIndex = #{index}
  	</select>
  	
  	<insert id="insertOne" parameterType="com.bit.yes.model.entity.NoticeVo">
  			INSERT INTO noticeBoard VALUES (#{index}, #{title}, #{content}, #{writer}, date_format(now(),"%Y-%c-%d"))
  	</insert>
  	
  	<delete id="deleteOne" parameterType="int">
  			DELETE noticeBoard, noticeImages FROM noticeBoard INNER JOIN noticeImages WHERE noticeBoard.noticeIndex=noticeImages.index AND noticeImages.index=#{value};
  	</delete>

  	<delete id="updatedelete" parameterType="int">
  			DELETE FROM mydb.noticeImages WHERE noticeImages.index=#{index};
  	</delete>

  	<insert id="updateimg" parameterType="com.bit.yes.model.entity.ImageVo">
  			insert into noticeImages values(#{index}, #{imageName})
  	</insert>
  	
  	<update id="updateOne" parameterType="com.bit.yes.model.entity.NoticeVo">
  			UPDATE noticeBoard SET TITLE=#{title}, CONTENT=#{content} WHERE noticeBoard.noticeIndex = #{index}
  	</update>
  
  	<!-- notice_paging 페이징 처리 -->
  	<!-- 전체 레코드 개수 조회 -->
	  	<select id ="writeGetCount" parameterType="hashmap" resultType="int">
	  		select count(*) from mydb.noticeBoard
	  		<choose>
	  			<when test="category == 'title'">
	  				where title like '%${keyword}%'
	  			</when>
	  			<when test='category == "writer"'>
	  				where writer like '%${keyword}%'
	  			</when>
	  		</choose>
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="writeList" parameterType="hashmap" resultMap="NoticeVo">
  			select * from mydb.noticeBoard
  			
  			<choose>
	  			<when test="category == 'title'">
	  				where title like '%${keyword}%'
	  			</when>
	  			<when test='category == "writer"'>
	  				where writer like '%${keyword}%'
	  			</when>
	  		</choose>
  			 order by noticeBoard.noticeIndex DESC limit #{offset}, #{noOfRecords}
  		</select>
  		
  		<select id ="writeInfoList" resultMap = "NoticeVo">
  			select * from mydb.noticeBoard where info = 1 
  			<choose>
	  			<when test="category == 'title'">
	  				and title like '%${keyword}%'
	  			</when>
	  			<when test='category == "writer"'>
	  				and writer like '%${keyword}%'
	  			</when>
	  		</choose>
  			order by noticeBoard.noticeIndex DESC
  		</select>
  		
<!--   		  	페이징 처리
  	전체 레코드 개수 조회
	  	<select id ="writeGetCount" resultType="int">
	  		select count(*) from mydb.notice
	  	</select>
	게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력)  	
  		<select id="writeList" parameterType="hashmap" resultMap="NoticeVo">
  			select * from mydb.notice order by notice.index DESC limit #{offset}, #{noOfRecords}
  		</select>
  		
  		<select id ="writeInfoList" resultMap = "NoticeVo">
  			select * from mydb.notice where info = 1 order by notice.index DESC
  		</select> -->
  		
  		
  		
  		
<!-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  -->  		
	<!-- 고객 상담 쿼리문 -->
	<select id="c_selectAll" resultType="com.bit.yes.model.entity.C_CsVo">
	  		SELECT * FROM clientCounsel ORDER BY clientCounsel.INDEX DESC
	  	
	</select>
  	
  	<select id="c_selectOne" resultType="com.bit.yes.model.entity.C_CsVo">
  			SELECT * FROM clientCounsel WHERE clientCounsel.INDEX = #{index}
  	</select>
  	
  	<select id="c_selectnickname" resultType="com.bit.yes.model.entity.UserVo">
  			SELECT * FROM userInfo where id = #{id} 
  	</select>
  	<select id="c_selectAddress" resultType="com.bit.yes.model.entity.BranchAddressVo">
  			select * from branchAddress where id = #{id}
  	</select>
  	
  	<insert id="c_insertOne" parameterType="com.bit.yes.model.entity.C_CsVo">
  			INSERT INTO clientCounsel VALUES (#{branchID},#{clientID},#{index}, #{title}, #{content}, #{writer}, date_format(now(),"%Y-%c-%d"),null)
  	</insert>
  	
  	<!-- client_paging 페이징 처리 -->
  	<!-- 전체 레코드 개수 조회 -->
  	
	  	<select id ="c_writeGetCount" parameterType="hashmap" resultType="int">
	  		select count(*) from mydb.clientCounsel where clientID = #{clientID}
	  		
	  		<choose>
	  			<when test="category == 'title'">
	  				and title like '%${keyword}%'
	  			</when>
	  			<when test='category == "writer"'>
	  				and writer like '%${keyword}%'
	  			</when>
	  		</choose>
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="c_writeList" parameterType="hashmap" resultMap="C_CsVo">
  			select * from mydb.clientCounsel where clientID=#{clientID} 
  				<choose>
	  			<when test="category == 'title'">
	  				and title like '%${keyword}%'
	  			</when>
	  			<when test='category == "writer"'>
	  				and writer like '%${keyword}%'
	  			</when>
	  		</choose>
  			
  			order by clientCounsel.index DESC limit #{offset}, #{noOfRecords}
  		</select>
  		
  		<select id ="c_writeInfoList" resultMap = "C_CsVo">
  			select * from mydb.clientCounsel where info = 1 order by clientCounsel.index DESC
  		</select>
  		
<!-- 	  	<select id ="c_writeGetCount" resultType="int">
	  		select count(*) from mydb.clientCounsel where clientID = #{clientID}
	  	</select>
	게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력)  	
  		<select id="c_writeList" parameterType="hashmap" resultMap="C_CsVo">
  			select * from mydb.clientCounsel where clientID=#{clientID} order by clientCounsel.index DESC limit #{offset}, #{noOfRecords}
  		</select>
  		
  		<select id ="c_writeInfoList" resultMap = "C_CsVo">
  			select * from mydb.clientCounsel where info = 1 order by clientCounsel.index DESC
  		</select> -->
  		
  		<select id="reserveselectAll" resultType="com.bit.yes.model.entity.BranchInfoVo" >
  			SELECT * FROM mydb.branchInfo WHERE id = ANY(SELECT branchID FROM mydb.reserve_list WHERE clientID = #{id})
  		</select>
  		
  		<select id="reserveOne" resultType="com.bit.yes.model.entity.BranchInfoVo" parameterType="java.lang.String">
  			select * from mydb.branchInfo where id = #{id}
  		</select>
  		
  		
  		
  		
<!-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  -->  		
	<!-- 사업자 상담 쿼리문 -->
  	<select id="s_selectOne" resultType="com.bit.yes.model.entity.S_CsVo">
  			SELECT * FROM branch_Counsel WHERE branch_Counsel.INDEX = #{index}
  	</select>
  	
  	<insert id="s_insertOne" parameterType="com.bit.yes.model.entity.S_CsVo">
  			INSERT INTO branch_Counsel VALUES (#{index}, #{title}, #{content}, #{writer}, date_format(now(),"%Y-%c-%d"),null,#{questionSelect} )
  	</insert>
  	<select id="s_selectnickname" resultType="com.bit.yes.model.entity.UserVo">
  			SELECT * FROM userInfo where id = #{id} 
  	</select>
  	
  	<!-- 페이징 처리 -->
  	<!-- 전체 레코드 개수 조회 -->
	  	<select id ="s_writeGetCount" parameterType="hashmap" resultType="int">
	  		select count(*) from mydb.branch_Counsel where writer=#{writer}  <!-- where writer = #{writer} -->
	  		  <choose>
	  			<when test="category == 'title'">
	  				and title like '%${keyword}%'
	  			</when>
	  			<when test='category == "writer"'>
	  				and writer like '%${keyword}%'
	  			</when>
	  		</choose>
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->
  		<select id="s_writeList" parameterType="hashmap" resultMap="S_CsVo">
  			select * from mydb.branch_Counsel where writer=#{writer} <!-- where writer=#{writer} -->
		  	<choose>
	  			<when test="category == 'title'">
	  				<!-- and --> and title like '%${keyword}%'
	  			</when>
	  			<when test='category == "writer"'>
	  				<!-- and --> and writer in (select writer from userInfo where nickname like '%${keyword}%' and not registNum = 0)
	  			</when>
			</choose>
  			 order by branch_Counsel.index DESC limit #{offset}, #{noOfRecords}
  		</select>
  		
  		<select id ="s_writeInfoList" resultMap = "S_CsVo">
  			select * from mydb.branch_Counsel where info = 1 order by branch_Counsel.index DESC
  		</select>
  		
<!-- 	  	<select id ="s_writeGetCount" resultType="int">
	  		select count(*) from mydb.branch_Counsel where writer = #{writer}
	  	</select>
	게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력)  	
  		<select id="s_writeList" parameterType="hashmap" resultMap="S_CsVo">
  			select * from mydb.branch_Counsel where writer=#{writer} order by branch_Counsel.index DESC limit #{offset}, #{noOfRecords}
  		</select>
  		
  		<select id ="s_writeInfoList" resultMap = "S_CsVo">
  			select * from mydb.branch_Counsel where info = 1 order by branch_Counsel.index DESC
  		</select> -->
  		
  		
  		
  		
<!-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  -->  		
	<!-- 관리자 상담 답변  쿼리문 -->
	<select id="ac_selectAll" resultType="com.bit.yes.model.entity.C_CsVo">
	  		SELECT * FROM clientCounsel ORDER BY clientCounsel.INDEX DESC
	  	
	</select>
  	
  	<select id="ac_selectOne" resultType="com.bit.yes.model.entity.C_CsVo">
  			SELECT * FROM clientCounsel WHERE clientCounsel.INDEX = #{index}
  	</select>
  	
  	<select id="ac_selectnickname" resultType="com.bit.yes.model.entity.UserVo">
  			SELECT * FROM userInfo where id = #{id} 
  	</select>
  	
  	<update id="acupdateOne" parameterType="com.bit.yes.model.entity.C_CsVo">
  			UPDATE clientCounsel SET COMMENT = #{comment} WHERE clientCounsel.index = #{index}
  	</update>

  	<!-- 페이징 처리 -->
  	<!-- 전체 레코드 개수 조회 -->
	  	<select id ="ac_writeGetCount" resultType="int">
	  		select count(*) from mydb.clientCounsel
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="ac_writeList" parameterType="hashmap" resultMap="C_CsVo">
  			select * from mydb.clientCounsel order by clientCounsel.index DESC limit #{coffset}, #{cnoOfRecords}
  		</select>
  		
  		<select id ="ac_writeInfoList" resultMap = "C_CsVo">
  			select * from mydb.clientCounsel where info = 1 order by clientCounsel.index DESC
  		</select>
  		
  		<!-- 날짜를 통한 검색시 게시글 조회 -->
  		<select id = "sac_writeGetCount" resultType="int" >
  			<![CDATA[ 
  			select count(*) from mydb.clientCounsel WHERE calendar >= #{sDate} AND calendar <= #{eDate}
  			]]> 
  		</select>
  		
  		<select id="sac_writeList" parameterType="hashmap" resultMap="C_CsVo">
  			<![CDATA[ 
  			select * from mydb.clientCounsel WHERE calendar >= #{sDate} AND calendar <= #{eDate} order by clientCounsel.index DESC limit #{coffset}, #{cnoOfRecords}
  			]]> 
  		</select>
  		
  		<select id ="sac_writeInfoList" resultMap = "C_CsVo">
  			<![CDATA[ 
  			select * from mydb.clientCounsel where info = 1 order by clientCounsel.index DESC
  			]]> 
  		</select>
  		<!-- 날짜를 통한 검색시 게시글 조회 -->
  		
  		<select id="areserveselectAll" resultType="com.bit.yes.model.entity.BranchInfoVo" >
  			SELECT * FROM mydb.branchInfo WHERE id = ANY(SELECT branchID FROM mydb.reserve_list WHERE clientID = #{id})
  		</select>
  		
  		<select id="areserveOne" resultType="com.bit.yes.model.entity.BranchInfoVo" parameterType="java.lang.String">
  			select * from mydb.branchInfo where id = #{id}
  		</select>
	
	<select id="as_selectOne" resultType="com.bit.yes.model.entity.S_CsVo">
  			SELECT * FROM branch_Counsel WHERE branch_Counsel.INDEX = #{index}
  	</select>
  	
  	<select id="as_selectnickname" resultType="com.bit.yes.model.entity.UserVo">
  			SELECT * FROM userInfo where id = #{id} 
  	</select>
  	
  	<update id="asupdateOne" parameterType="com.bit.yes.model.entity.S_CsVo">
  			UPDATE branch_counsel SET COMMENT = #{comment} WHERE branch_counsel.index = #{index}
  	</update>
  	<!-- 페이징 처리 -->
  	<!-- 전체 레코드 개수 조회 -->
	  	<select id ="as_writeGetCount" resultType="int">
	  		select count(*) from mydb.branch_Counsel
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="as_writeList" parameterType="hashmap" resultMap="S_CsVo">
  			select * from mydb.branch_Counsel order by branch_Counsel.index DESC limit #{soffset}, #{snoOfRecords}
  		</select>
  		
  		<select id ="as_writeInfoList" resultMap = "S_CsVo">
  			select * from mydb.branch_Counsel where info = 1 order by branch_Counsel.index DESC
  		</select>
  	<!-- 날짜를 통한 검색시 게시글 조회 -->
  		<select id = "sas_writeGetCount" resultType="int" >
  			<![CDATA[ 
  			select count(*) from mydb.branch_Counsel WHERE calendar >= #{sDate} AND calendar <= #{eDate}
  			]]> 
  		</select>
  		
  		<select id="sas_writeList" parameterType="hashmap" resultMap="S_CsVo">
  			<![CDATA[ 
  			select * from mydb.branch_Counsel WHERE calendar >= #{sDate} AND calendar <= #{eDate} order by branch_Counsel.index DESC limit #{soffset}, #{snoOfRecords}
  			]]> 
  		</select>
  		
  		<select id ="sas_writeInfoList" resultMap = "S_CsVo">
  			<![CDATA[ 
  			select * from mydb.branch_Counsel where info = 1 order by branch_Counsel.index DESC
  			]]> 
  		</select>
  		<!-- 날짜를 통한 검색시 게시글 조회 -->	
  		
  		
  		<!-- 파일 이미지 업로드 처리 -->
  		<insert id="noticeImgUpload" parameterType="com.bit.yes.model.entity.ImageVo">
		  	insert into noticeImages values ((select max((mydb.noticeBoard.noticeIndex)) from mydb.noticeBoard), #{imageName})
		  </insert>
		<select id="noticeSubImage" resultType="com.bit.yes.model.entity.ImageVo">
		  	select * from mydb.noticeImages where noticeImages.index = #{index}
		</select>

  		<!-- 파일 이미지 업로드 처리 -->
  		<insert id="c_counselImgUpload" parameterType="com.bit.yes.model.entity.ImageVo">
		  	insert into cCounselImages values ((select max((mydb.clientCounsel.index)) from mydb.clientCounsel), #{imageName})
		  </insert>
		<select id="c_counselSubImage" resultType="com.bit.yes.model.entity.ImageVo">
		  	select * from mydb.cCounselImages where cCounselImages.index = #{index}
		</select>
		
  		<!-- 파일 이미지 업로드 처리 -->
  		<insert id="s_counselImgUpload" parameterType="com.bit.yes.model.entity.ImageVo">
		  	insert into s_counsel_images values ((select max((mydb.branch_counsel.index)) from mydb.branch_counsel), #{imageName})
		  </insert>
		<select id="s_counselSubImage" resultType="com.bit.yes.model.entity.ImageVo">
		  	select * from mydb.s_counsel_images where s_counsel_images.index = #{index}
		</select>
  		
<!-- 관리자용 mapper --> <!-- 관리자용 mapper --> <!-- 관리자용 mapper --> <!-- 관리자용 mapper --> <!-- 관리자용 mapper -->
  		
  		<!-- 전체 레코드 개수 조회 --> <!-- 전체 -->
	  	<select id ="management_writeGetCount" resultType="int">
	  		select count(*) from mydb.branchInfo where acceptState = 'false'
	  	</select>
	<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->  	
  		<select id="management_writeList" parameterType="hashmap" resultMap="BranchInfoVo">
  			select * from mydb.branchInfo where acceptState = 'false' order by id ASC limit #{offset}, #{noOfRecords}
  		</select>
  		<select id ="management_writeInfoList" resultMap = "BranchInfoVo">
  			select * from mydb.branchInfo where info = 1 order by branchInfo.id ASC
  		</select>
  		  	<!-- branchAddress로 db가 따로 있으므로 이것도 가져가서 출력 -->	
  		<select id="management_address" resultType="com.bit.yes.model.entity.BranchAddressVo">
  			select * from mydb.branchAddress where id = #{id}
  		</select>	
  		
  		
  <!-- 추가 한 내용 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ  -->
  		<update id="manage_update" parameterType="java.lang.String">
  			UPDATE branchInfo SET acceptState='true' WHERE branchInfo.id = #{id}
  		</update>
		<update id="manage_registNum" parameterType="java.lang.String"> 
			UPDATE userInfo SET registNum=1 WHERE userInfo.id = #{id} 
		</update>
		<delete id="manage_delete" parameterType="java.lang.String"> 
			DELETE branchInfo, branchAddress FROM branchInfo INNER JOIN branchAddress WHERE branchInfo.id=branchAddress.id AND branchAddress.id=#{id}; 
		</delete>

	<!-- 전체 레코드 개수 조회 -->
	<!-- 전체 -->
		<select id="managementdel_writeGetCount" resultType="int">
			select count(*) from mydb.branchInfo where acceptState = 1
		</select>

<!-- 게시글 조회를 위한 쿼리 (값을 받아와서 해당 하단 페이지 버튼의 레코드 출력) -->
		<select id="managementdel_writeList" resultMap="BranchInfoVo" parameterType="hashmap"> 
			select * from mydb.branchInfo where acceptState = 'true' order by id ASC limit #{offset}, #{noOfRecords}
		</select>
		<select id="managementdel_writeInfoList" resultMap="BranchInfoVo"> 
			select * from mydb.branchInfo where info = 1 order by branchInfo.id ASC 
		</select>
		<update id="manage_delregistNum" parameterType="java.lang.String"> 
			UPDATE userInfo SET registNum = 0 WHERE userInfo.id = #{id} 
		</update>
		<delete id="manage_deldelete" parameterType="java.lang.String">
			DELETE branchInfo, branchAddress FROM branchInfo INNER JOIN branchAddress WHERE branchInfo.id=branchAddress.id AND branchAddress.id=#{id}; 
		</delete>
  
  
  </mapper>
